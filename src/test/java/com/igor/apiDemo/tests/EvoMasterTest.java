package com.igor.apiDemo.tests;

import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-09-11T21:36:59.051-03:00[America/Cayenne]
 * <br>
 * The generated test suite contains 11 tests
 * <br>
 * Covered targets: 11
 * <br>
 * Used time: 0h 0m 30s
 * <br>
 * Needed budget for current results: 79%
 * <br>
 *
 */
public class EvoMasterTest {


    private static String baseUrlOfSut = "http://localhost:8080";


    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }


    @Test
    public void test_0() throws Exception {

        given().accept("*/*")
                .get(baseUrlOfSut + "/funcionarios")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'nome'", hasItem(containsString("John Soares")))
                .body("'telefone'", hasItem(containsString("995568898")))
                .body("'email'", hasItem(containsString("johnsoares")))
                .body("'id'", hasItem(numberMatches(1.0)))
                .body("'status'", hasItem(containsString("INATIVO")))
                .body("'nome'", hasItem(containsString("Roberto Carneiro")))
                .body("'telefone'", hasItem(containsString("998874521")))
                .body("'email'", hasItem(containsString("robertocarneiro")))
                .body("'id'", hasItem(numberMatches(2.0)))
                .body("'status'", hasItem(containsString("INATIVO")))
                .body("'nome'", hasItem(containsString("lfUpp")))
                .body("'telefone'", hasItem(containsString("XuuIT_X")))
                .body("'email'", hasItem(containsString("4onwBS9UO9")))
                .body("'id'", hasItem(numberMatches(3.0)))
                .body("'status'", hasItem(containsString("ATIVO")))
                .body("'nome'", hasItem(containsString("es99LF")))
                .body("'telefone'", hasItem(containsString("rMbOi5MV7vIw6")))
                .body("'email'", hasItem(containsString("oHgZqrS")))
                .body("'id'", hasItem(numberMatches(4.0)))
                .body("'status'", hasItem(containsString("ATIVO")));
    }


    @Test
    public void test_1() throws Exception {

        given().accept("*/*")
                .get(baseUrlOfSut + "/clientes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(12))
                .body("'nome'", hasItem(containsString("Pedro Paulo")))
                .body("'telefone'", hasItem(containsString("995566887")))
                .body("'email'", hasItem(containsString("pedropaulo")))
                .body("'id'", hasItem(numberMatches(1.0)))
                .body("'nome'", hasItem(containsString("Joao Mateus")))
                .body("'telefone'", hasItem(containsString("994123658")))
                .body("'email'", hasItem(containsString("joaomateus")))
                .body("'id'", hasItem(numberMatches(2.0)))
                .body("'nome'", hasItem(containsString("Lucas Simao")))
                .body("'telefone'", hasItem(containsString("988547485")))
                .body("'email'", hasItem(containsString("lucasimao")))
                .body("'id'", hasItem(numberMatches(3.0)))
                .body("'nome'", hasItem(containsString("Daniel Matias")))
                .body("'telefone'", hasItem(containsString("996568889")))
                .body("'email'", hasItem(containsString("danielmatias")))
                .body("'id'", hasItem(numberMatches(4.0)))
                .body("'nome'", hasItem(containsString("Maria Ferreira")))
                .body("'telefone'", hasItem(containsString("996568889")))
                .body("'email'", hasItem(containsString("mariaferreira")))
                .body("'id'", hasItem(numberMatches(5.0)))
                .body("'nome'", hasItem(containsString("Francisca Maciel")))
                .body("'telefone'", hasItem(containsString("996568889")))
                .body("'email'", hasItem(containsString("franciscamaciel")))
                .body("'id'", hasItem(numberMatches(6.0)))
                .body("'nome'", hasItem(containsString("Joaquina Fragoso")))
                .body("'telefone'", hasItem(containsString("996568889")))
                .body("'email'", hasItem(containsString("joaquinafragoso")))
                .body("'id'", hasItem(numberMatches(7.0)))
                .body("'nome'", hasItem(containsString("Jeremias Herculano")))
                .body("'telefone'", hasItem(containsString("987745684")))
                .body("'email'", hasItem(containsString("jeremiasherculano")))
                .body("'id'", hasItem(numberMatches(8.0)))
                .body("'nome'", hasItem(containsString("Aristeu Malaquias")))
                .body("'telefone'", hasItem(containsString("965358545")))
                .body("'email'", hasItem(containsString("aristeualaquias")))
                .body("'id'", hasItem(numberMatches(9.0)))
                .body("'nome'", hasItem(containsString("Jorisclene Melquisedex")))
                .body("'telefone'", hasItem(containsString("965325489")))
                .body("'email'", hasItem(containsString("jorisclenemelquisedex")))
                .body("'id'", hasItem(numberMatches(10.0)))
                .body("'nome'", hasItem(containsString("Jeancloud Wandame")))
                .body("'telefone'", hasItem(containsString("958745668")))
                .body("'email'", hasItem(containsString("jeancloudwandame")))
                .body("'id'", hasItem(numberMatches(11.0)))
                .body("'nome'", hasItem(containsString("Arnaldo Schuazineguer")))
                .body("'telefone'", hasItem(containsString("875681568")))
                .body("'email'", hasItem(containsString("arnaldoschuazineguer")))
                .body("'id'", hasItem(numberMatches(12.0)));
    }


    @Test
    public void test_2() throws Exception {

        given().accept("*/*")
                .contentType("application/json")
                .body(" { " +
                    " \"cpf\": \"jSOzF5\", " +
                    " \"dt_nascimento\": \"1985-06-02T02:52:14\", " +
                    " \"email\": \"nn\", " +
                    " \"nome\": \"C0hfU8cFV\", " +
                    " \"telefone\": \"ekfVJGfk0Qb1nOo\" " +
                    " } ")
                .post(baseUrlOfSut + "/funcionarios")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'nome'", containsString("C0hfU8cFV"))
                .body("'telefone'", containsString("jSOzF5"))
                .body("'email'", containsString("nn"))
                .body("'status'", containsString("ATIVO"));
    }


    @Test
    public void test_3() throws Exception {

        given().accept("*/*")
                .contentType("application/json")
                .body(" { " +
                    " \"cpf\": \"zHRe\", " +
                    " \"dt_Nascimento\": \"1930-04-17T22:22:03\", " +
                    " \"email\": \"cFhGbJs3zXNB9X\", " +
                    " \"nome\": \"L25\", " +
                    " \"telefone\": \"CL\" " +
                    " } ")
                .post(baseUrlOfSut + "/clientes")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'nome'", containsString("L25"))
                .body("'telefone'", containsString("CL"))
                .body("'email'", containsString("cFhGbJs3zXNB9X"));
    }


    @Test
    public void test_4() throws Exception {

        given().accept("*/*")
                .contentType("application/json")
                .body(" { " +
                    " \"cpf\": \"4Q1eE_ogM\", " +
                    " \"dt_nascimento\": \"1938-10-23T16:48:07\", " +
                    " \"nome\": \"PRcaYpQjxPh4o\", " +
                    " \"telefone\": \"Lm36rM8TYFM\" " +
                    " } ")
                .post(baseUrlOfSut + "/funcionarios")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'campo'", hasItem(containsString("email")))
                .body("'msgErro'", hasItem(containsString("n√£o pode ser nulo")))
                .body("'campo'", hasItem(containsString("email")))
                .body("'msgErro'", hasItem(containsString("n√£o pode estar vazio")));
    }


    @Test
    public void test_5() throws Exception {

        given().accept("*/*")
                .contentType("application/json")
                .body(" { " +
                    " \"cpf\": \"maqIRRpLw5mtUKkK\", " +
                    " \"dt_Nascimento\": \"1982-06-14T13:03:48\", " +
                    " \"email\": \"3ATP\", " +
                    " \"telefone\": \"s3\" " +
                    " } ")
                .post(baseUrlOfSut + "/clientes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'campo'", hasItem(containsString("nome")))
                .body("'msgErro'", hasItem(containsString("n√£o pode ser nulo")))
                .body("'campo'", hasItem(containsString("nome")))
                .body("'msgErro'", hasItem(containsString("n√£o pode estar vazio")));
    }


    @Test
    public void test_6() throws Exception {

        given().accept("*/*")
                .contentType("application/json")
                .body(" { " +
                    " \"email\": \"l\" " +
                    " } ")
                .put(baseUrlOfSut + "/clientes/1597597897")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'campo'", hasItem(containsString("telefone")))
                .body("'msgErro'", hasItem(containsString("n√£o pode ser nulo")));
    }


    @Test
    public void test_7() throws Exception {

        given().accept("*/*")
                .get(baseUrlOfSut + "/clientes/640932024")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }


    @Test
    public void test_8() throws Exception {

        given().accept("*/*")
                .get(baseUrlOfSut + "/funcionarios/743916802")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }


    @Test
    public void test_9() throws Exception {

        given().accept("*/*")
                .delete(baseUrlOfSut + "/clientes/-1180452688")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }


    @Test
    public void test_10() throws Exception {

        given().accept("*/*")
                .contentType("application/json")
                .body(" { " +
                    " \"email\": \"ue63g6fsCNI\", " +
                    " \"telefone\": \"sjAuywovbwnNgM\" " +
                    " } ")
                .put(baseUrlOfSut + "/clientes/97564496")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("")
                .body(isEmptyOrNullString());
    }


}
